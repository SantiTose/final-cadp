Variable: Es un lugar en la memoria en el que se almacena un tipo de dato como contenido

Calcular el tiempo de ejecucion que tardara un codigo:
las operaciones aritmeticologicas se calculan en 1 unidad de tiempo para cada una de ellas(suma,resta,multiplicacion,
division,div,mod,asignacion) 

Estructuras de control(if,else,while,for,..) 

Calcular su tiempo de ejecucion IF:
IF: Se evalua lo que tarda la comprobacion + el tiempo del cuerpo, si hubiera un else se evalua cada uno por separado y
se toma el que mas memoria ocupe

IF ( x > n ) AND ( y < x ) 
la condicion tiene una comprobacion (x mayor que n) por lo que tarda 1UT a esto le sumamos otra 
UT por el and que une ambas comprobaciones y por ultimo le sumamos 1UT adicional por la comprobacion (y menor que x) por lo
que la condicion de este IF nos tomara 3UT en completarse

Cuerpo del if:
x := x + 1 
Esta linea de codigo nos tomara 2UT ya que tenemos una asignacion (x:=...) y una suma (x+1)

ELSE
x := x + 1;
y := x - 4;
Cada una de estas lineas nos tomara 2 UT ya que en ambas tenemos una asignacion (x:=...)(y:=...) y una suma o resta (x+1)
(x-4) por lo que el cuerpo del ELSE nos tomara 4UT

Por lo que ahora elegimos el cuerpo que tuvo mayor consumo de memoria que en este caso fue el ELSE y lo sumamos a lo que
tomo la condicion 
CONDICION: 3UT  + CUERPO DEL ELSE: 4UT = 7UT esto es lo que consumio de memoria nuestra condicion de IF

Calcular Tiempo de Ejecucion FOR:
FOR i:= 0 to 10 
Para calcular la memoria que consume un bucle for debemos calcular primero cuantas veces se realizara este, para lo cual
haremos el limite superior menos el limite inferior mas uno, de esta forma calculamos la cantidad de vueltas que dara nuestro
bucle for, en este caso hariamos (10 - 0) + 1 = 11, once veces recorreremos este bucle, por lo que ahora teniendo este dato
lo llamaremos N es decir N = 11.
Ahora utilizaremos la formula para calcular el tiempo de ejecucion de un bucle for 
  ((3 * N) + 2) + (N *( Cuerpo del for ))

Cuerpo del FOR
x := x + 1;
Para esta linea de codigo utilizaremos 2UT una para la asignacion (x:=...) y otra para la suma (x+1)

Por lo que ahora podriamos reemplazar nuestros valores en la formula y resolver.
  ((3 * 11) + 2) + (11 * 2)
      (33 + 2) + 22
          35 + 22
             57
Como resultado nuestro bucle FOR tomara 57 unidades de tiempo en ejecutarse.

Calcular Tiempo de Ejecucion WHILE:
x := 0;
WHILE ( x < 5)
Para calcular el tiempo de ejecucion de un bucle while debemos tambien utilizar una formula, en la que calcularemos la 
condicion, la cantidad de veces que se ejecuta el bucle y la memoria que consume el cuerpo. Primero conozcamos la formula
para calcular la cantidad de memoria que consume este bucle.
  C * (N + 1) + N * (Cuerpo del while)  

"C" va a ser nuestra condicion, en este caso solo valdra 1 UT ya que es una operacion logica '<' 

"N" al calcular N tenemos que tener en cuenta si conocemos o no todos los valores, ya que en este caso tenemos una 
variable 'x'. Por suerte antes de aparecer el bucle while tenemos la asignacion de esta variable 'x' asignandole el valor
de cero, por lo que ahora calcularemos la cantidad de veces que se repite este bucle restando el limite superior menos el
limite inferior, en este caso (5 - 0) = 5 nuestro N vale 5 unidades de tiempo. (Si en algun caso no conocemos el valor de
alguna de nuestras variables, dejamos N como una incognita en nuestra ecuacion y resolvemos hasta donde podamos dejando N
sin descubrir)

Cuerpo del WHILE
x := x + 1;
En esta linea de codigo utilizaremos solo 2 UT 

Reemplazemos en la Formula
  1 * (5 + 1) + 5 * (2)
        6 + 10
          16
Este bucle WHILE tomara 16 UT en completarse.

Calcular tiempo de ejecucion REPEAT UNTIL:
Es muy similar al WHILE, tendremos que calcular la condicion, la cantidad de veces que se repite y el cuerpo del codigo
veamos la formula para calcular la cantidad de memoria que consume este bucle.
  C * (N) + (N * (Cuerpo del codigo)

aux:=0;
REPEAT
UNTIL (aux > 5)
Como podemos ver esta condicion se repetira hasta que aux supere el valor de 5, por lo que este bucle se repetira 5 veces
tambien debemos considerar que la condicion equivale a 1 UT por lo que con esta informacion reemplazamos los valores de
N = 5 y de C = 1

Cuerpo del REPEAT UNTIL:
x := aux;
aux := aux + 1;
El cuerpo tendra un valor de 3 UT por lo visto anteriormente

Reemplazo en la Formula

  1 * (5) + 5 * (3)
        5 + 15
           20
Este bucle tiene un coste de 20UT


ALOCACIONES DE MEMORIA DINAMICA Y ESTATICA

VALORES DE CADA UNO DE LOS TIPOS DE VARIABLES
Valores que ocupan en la Memoria Estatica (ME)
Char     |   1 byte
Boolean  |   1 byte
Integer  |   6 bytes
Real     |   8 bytes
String   |   Tamaño + 1 (sino se especifica el tamaño es 255 + 1)
Subrango |   Depende el tipo
Registro |   La suma de sus campos
Vector   |   Dimensión física * tipo elemento
Puntero  |   4 bytes , pero puede reservar memoria dinámica para su contenido la cantidad depende del tipo de dato

MEMORIA ESTATICA: consideraremos sólo las variables locales,variables globales de programa y constantes.
MEMORIA DINAMICA: consideraremos sólo cuando en la ejecución de un programa se reserva o libera memoria.

Ejemplo
Program uno;
Const
 DF = 10; (Siempre calculamos el valor de las constantes)
Type
  puntero = ^real;
  persona = record
   nombre:string[20];
   dni:integer;
  end;
 puntPer = ^persona;

 Var
 P: puntero
 R:real; Q:char;
 per: puntPer;
 perso:persona; 
Begin
  new(P);

Como tenemos una constante entera esta valdra 4 bytes, ademas de esto solo contaremos la memoria que ocupan las variables
cuando son declaradas en el apartado de var, no cuando son definidas en type eso solo nos dira que tipo de valor ocupa

MEMORIA ESTATICA
  DF = 4 bytes (entero)
  P = 4 bytes (puntero)
  R = 8 bytes (real)
  Q = 1 byte (char)
  Per = 4 bytes (puntero)
  Perso = 21 bytes (String) + 4 bytes (entero) = 25 bytes

MEMORIA DINAMICA
  P = 8 bytes (real) (reserva esos bytes ya que se toma el valor al que apunta el puntero, que en ese caso es un real)




